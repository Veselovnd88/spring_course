Методы у бинов: инит метод, дестрой метод
Жизненный цикл бина-запуск приложение-запуск спринг контейнера (окружение где лежат бины)
-создание объекта бина по конфигурациионому файлу - в бин внедряются зависимости-
вызов инит метода (логика при создангии бина)-после этого бин готов к использованию
при завершении спринш приложения - вызов дестрой метод( что должно происходить при удалении бина)
спринг автоматически его вызовет - после этого приложение остановится

инит - инициализация ресурсов, обращение к внешним файлам, подколючение к бд
дестрой - уничтожение бинов - очищегие ресурсов, закрытие потоков, закрытие подключения к бд
Модификаторы доступа инит и дестрой метода - могут быть любые
могут возвращать всё что угодно(чаще всего воид)
назвагние любое, но обязательно без аргументов
Для бинов со скоупом прототип спринг не вызывает дестрой метод
фабричный метод программирования - такой паттерн который предлагает создавать объекты не напрямую, а через метод
Если объекты создаются с помощью фабричного метода то можно прописать factory-method = "getClassicalMusic"
Если не создаются спомощью нью, а с помощбю фабрики, метод должен быть статик
Независимо от того что в фабр методе каждый раз сроздается новый объект если скоуп синглтон, то всегда будет один объект
спринг один раз его вызовет, и будет каждый раз давать ссылку на этот объект
Урок 9----------------------------
Аннотации
это специальные конструкциии, похъожие на комментарии, с помощью которых можно передавать какие либо инструкции компилятору
(оверрайд),либо инструкции для анализаторов исходного кода., передавать метаданные
Намного удобнее чем XML конфигурация, српинг сканирует все классы, находит аннотации и атвоматически создается бины из этих классов
ручное создание бина не потребуется @Component - если хотим чтобы спринг создал аннотацию (можно указать id)
если id не будет, то бин = название класса - но бука маленькая
-уюерем создание бинов из xml и включим сканирование аннотаций
аннотация autowired для внедрения зависимостей, аннотаця ставится на конструкторе
сначала спринг созадет бины, потом проверяет подходит ли какой либо бин под зависимость.
 Если есть - то ок если нет - то ошибка, если несколько - то неоднозначность
Автовайрд подбирает бины по их типу, если спринг найдет объект - то он его и привяжет
можно проставлять на полях, на сеттерах и на конструкторах. Можно внедрить зависимость даже в приватное поле
спринг будет делать это с помощью рефлексии
11
Если два бина подходят в один автовайрд - то вылетает ошибка, аннотация Куалифаер

12 Аннтоации квалифаер, скоуп, пост Констрат и Пре дестрой через аннотации
13Конфигурация джава кодом без конфига - вся конфигурация на xml
- xm;+annotaion
и есть Java annotation без XML - java class с конфигурацией - @Configuratuin
пустой класс = пустой конфиг xml
ComponentScan, @Bean -> AnnotationConfigApplicationContext
под аннотацией бин внедряются зависимости - бин передается как аргумента- если без автовайрд
Скоупы указыва.тся в конфиге при создании бинов. Для передачи значенйи проперти
PropertySource("класспас: путь")
14
Мы прошли инверсия контроля-> внедрение зависимостей->бины, конфигурации, xml java и тд
MVC - контроллер обрабатывает действия пользователя, модель работает с данными-бд
view - отображает
диспетчер сервлет - входная точка, встречает хттп - и уходит в диспетчер - потом отправляет в контроллер




















